local ESP = {}
ESP.Settings = {
    Enabled = true,
    BoxESP = true,
    NameESP = true,
    DistanceESP = true,
    TracerESP = true,
    Radar = true,
    MaxDistance = 1000
}

local Camera = game:GetService("Workspace").CurrentCamera
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local LocalPlayer = Players.LocalPlayer
local Drawing = Drawing or {} -- Include if using custom drawing functions

local function CreateDrawing(type, properties)
    local drawing = Drawing.new(type)
    for key, value in pairs(properties) do
        drawing[key] = value
    end
    return drawing
end

ESP.Boxes = {}
ESP.Tracers = {}
ESP.Names = {}

function ESP:Clear()
    for _, drawing in pairs(ESP.Boxes) do
        drawing:Remove()
    end
    for _, drawing in pairs(ESP.Tracers) do
        drawing:Remove()
    end
    for _, drawing in pairs(ESP.Names) do
        drawing:Remove()
    end
    ESP.Boxes = {}
    ESP.Tracers = {}
    ESP.Names = {}
end

function ESP:DrawBox(player, position, size, color)
    if not ESP.Boxes[player] then
        ESP.Boxes[player] = CreateDrawing("Square", {Color = color, Thickness = 2, Filled = false})
    end

    ESP.Boxes[player].Size = size
    ESP.Boxes[player].Position = position
    ESP.Boxes[player].Visible = true
end

function ESP:DrawTracer(player, position, color)
    if not ESP.Tracers[player] then
        ESP.Tracers[player] = CreateDrawing("Line", {Color = color, Thickness = 1})
    end

    ESP.Tracers[player].From = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y)
    ESP.Tracers[player].To = position
    ESP.Tracers[player].Visible = true
end

function ESP:DrawName(player, position, name, color)
    if not ESP.Names[player] then
        ESP.Names[player] = CreateDrawing("Text", {Text = name, Size = 18, Color = color, Center = true})
    end

    ESP.Names[player].Position = position
    ESP.Names[player].Text = name
    ESP.Names[player].Visible = true
end

function ESP:UpdatePlayer(player)
    local character = player.Character
    if not character or not character:FindFirstChild("HumanoidRootPart") or not character:FindFirstChild("Humanoid") then return end

    local humanoidRootPart = character.HumanoidRootPart
    local humanoid = character.Humanoid
    local distance = (LocalPlayer.Character.HumanoidRootPart.Position - humanoidRootPart.Position).Magnitude
    if distance > ESP.Settings.MaxDistance then return end

    local position, visible = Camera:WorldToViewportPoint(humanoidRootPart.Position)
    if visible then
        local color = player.TeamColor.Color or Color3.new(1, 1, 1)
        
        -- Box ESP
        if ESP.Settings.BoxESP then
            local headPos = Camera:WorldToViewportPoint(character.Head.Position)
            local legPos = Camera:WorldToViewportPoint(humanoidRootPart.Position - Vector3.new(0, 3, 0))
            local size = Vector2.new(1000 / distance, (headPos - legPos).Y)
            ESP:DrawBox(player, Vector2.new(headPos.X - size.X / 2, headPos.Y), size, color)
        end
        
        -- Name ESP
        if ESP.Settings.NameESP then
            ESP:DrawName(player, Vector2.new(position.X, position.Y - 30), player.Name, color)
        end
        
        -- Distance ESP
        if ESP.Settings.DistanceESP then
            ESP:DrawName(player, Vector2.new(position.X, position.Y - 10), string.format("[%d]", math.floor(distance)), color)
        end
        
        -- Tracer ESP
        if ESP.Settings.TracerESP then
            ESP:DrawTracer(player, Vector2.new(position.X, position.Y), color)
        end
    end
end

function ESP:Update()
    ESP:Clear()
    if not ESP.Settings.Enabled then return end
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            ESP:UpdatePlayer(player)
        end
    end
end

RunService.RenderStepped:Connect(function()
    ESP:Update()
end)

return ESP
